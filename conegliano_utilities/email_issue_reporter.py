"""
Email Issue Reporter - Send issues via email when GitHub is not accessible
"""

import smtplib
import json
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
from typing import Dict, Optional, Any, List


def send_issue_email(
    title: str,
    body: str,
    recipient_email: str,
    sender_email: Optional[str] = None,
    sender_password: Optional[str] = None,
    smtp_server: str = "smtp.gmail.com",
    smtp_port: int = 587,
    labels: Optional[List[str]] = None
) -> Dict[str, Any]:
    """
    Send issue details via email when GitHub access is restricted.

    ~~~
    â€¢ Creates formatted email with issue details
    â€¢ Sends via SMTP to specified recipient
    â€¢ Includes system info and debugging data
    â€¢ Returns success status and email metadata
    ~~~

    Args:
        title (str): Issue title
        body (str): Issue description and details
        recipient_email (str): Email address to send issue to
        sender_email (str, optional): Sender email (defaults to recipient)
        sender_password (str, optional): Sender email password/app password
        smtp_server (str): SMTP server address
        smtp_port (int): SMTP server port
        labels (List[str], optional): Issue labels

    Returns type: email_result (Dict[str, Any]) - email sending result
    """
    try:
        # Use recipient as sender if not specified
        if not sender_email:
            sender_email = recipient_email

        # Create email
        msg = MIMEMultipart()
        msg['From'] = sender_email
        msg['To'] = recipient_email
        msg['Subject'] = f"[ISSUE] {title}"

        # Format email body
        email_body = f"""
Issue Report - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

Title: {title}

Labels: {', '.join(labels) if labels else 'None'}

Description:
{body}

---
This issue was automatically generated by the issue_logger module.
Please create a GitHub issue manually or use this information for debugging.
        """.strip()

        msg.attach(MIMEText(email_body, 'plain'))

        # Send email
        if sender_password:
            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(sender_email, sender_password)
            server.send_message(msg)
            server.quit()

            return {
                "success": True,
                "method": "email",
                "recipient": recipient_email,
                "sent_at": datetime.now().isoformat(),
                "title": title
            }
        else:
            return {
                "success": False,
                "error": "Email password required for SMTP authentication",
                "method": "email"
            }

    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "method": "email"
        }


def create_mailto_link(title: str, body: str, recipient: str = "your.email@domain.com") -> str:
    """
    Generate a mailto link for manual email sending of issues.

    ~~~
    â€¢ Creates mailto URL with pre-filled subject and body
    â€¢ Encodes special characters for URL compatibility
    â€¢ Provides fallback when SMTP is not available
    â€¢ Returns clickable link for manual email clients
    ~~~

    Args:
        title (str): Issue title for email subject
        body (str): Issue description for email body
        recipient (str): Default recipient email address

    Returns type: mailto_url (str) - formatted mailto link
    """
    import urllib.parse

    subject = f"[ISSUE] {title}"
    encoded_subject = urllib.parse.quote(subject)
    encoded_body = urllib.parse.quote(body)

    return f"mailto:{recipient}?subject={encoded_subject}&body={encoded_body}"


def print_email_issue(title: str, body: str, recipient: str = "your.email@domain.com") -> None:
    """
    Print formatted email content for manual copying and sending.

    ~~~
    â€¢ Displays formatted email template in console
    â€¢ Includes recipient, subject, and body
    â€¢ Provides easy copy-paste format for manual sending
    â€¢ Shows mailto link for direct email client opening
    ~~~

    Args:
        title (str): Issue title
        body (str): Issue description
        recipient (str): Email recipient

    Returns type: None (NoneType) - prints email template to console
    """
    print("ðŸ“§ EMAIL ISSUE TEMPLATE")
    print("=" * 50)
    print(f"To: {recipient}")
    print(f"Subject: [ISSUE] {title}")
    print("-" * 50)
    print(body)
    print("-" * 50)
    print(f"ðŸ“Ž Mailto Link: {create_mailto_link(title, body, recipient)}")
    print("=" * 50)