name: Create Release

on:
  push:
    branches: [ main ]
    paths: [ 'setup.py' ]  # Only trigger when setup.py changes

permissions:
  contents: write
  actions: read
  checks: read

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog

    - name: Extract version from setup.py
      id: get_version
      run: |
        VERSION=$(python -c "import re; content=open('setup.py').read(); print(re.search(r'version=\"([^\"]+)\"', content).group(1))")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT

    - name: Check if tag exists
      id: check_tag
      run: |
        if git rev-parse "v${{ steps.get_version.outputs.version }}" >/dev/null 2>&1; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Generate changelog
      id: changelog
      if: steps.check_tag.outputs.exists == 'false'
      run: |
        # Get commits since last tag, or all commits if no tags exist
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          COMMITS=$(git log $LAST_TAG..HEAD --oneline --no-merges)
        else
          COMMITS=$(git log --oneline --no-merges)
        fi

        # Format commits for release notes
        echo "## Changes" > changelog.md
        echo "" >> changelog.md
        if [ -n "$COMMITS" ]; then
          echo "$COMMITS" | sed 's/^/• /' >> changelog.md
        else
          echo "• No new changes" >> changelog.md
        fi

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        cat changelog.md >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Release
      if: steps.check_tag.outputs.exists == 'false'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "${{ steps.get_version.outputs.tag }}" \
          --title "Release ${{ steps.get_version.outputs.tag }}" \
          --notes "${{ steps.changelog.outputs.changelog }}" \
          --latest